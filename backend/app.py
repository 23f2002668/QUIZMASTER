# Import All Required Libraries And Modules
# Module ==> A single file consisting a python program with extension '.py' (e.g., app.py, mad-2.py)
# Library ==> A collection of modules (e.g., Pandas, Numpy)

import subprocess, os, glob
subprocess.run("pip install --upgrade pip", shell=True)
subprocess.run("pip install -r requirements.txt", shell=True)

import sqlite3, random, time, json, statistics, base64, csv
import matplotlib, matplotlib.pyplot as plt, time, numpy as np, pandas as pd
from flask_cors import CORS
from celery import Celery
from celery.schedules import crontab
from datetime import datetime
from string import ascii_letters
from urllib.parse import unquote
from flask_mail import Mail, Message
from flask_sqlalchemy import SQLAlchemy
from passlib.hash import sha256_crypt
from werkzeug.utils import secure_filename
from flask import Flask, render_template, url_for, redirect, session, json, jsonify, request, current_app, send_file
from reportlab.pdfgen import canvas as can
from reportlab.lib import pdfencrypt, colors
from reportlab.lib.units import inch
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Image, Spacer, Table, TableStyle, PageBreak
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER, TA_RIGHT, TA_LEFT


# Used for saving png images generated by matplotlib
matplotlib.use('Agg')


# Create Object For Flask Application
app = Flask(__name__)
CORS(app)  # Enable CORS globally

# Define Secret Key
# Purpose ==> 1. Session Management,  2. CSRF Protection  &  3. Signing Cookies
app.secret_key = "XaITbfghe@4591RRTUCDSfdkodg&8249rut774360@#dhfu$hfhfk"


# Create Sqlite Database File for QuizMaster
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///QuizMaster.sqlite3"

# Enable SQLALCHEMY to Track Changes/Modifications to Objects
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True

# Initialize SQLALCHEMY
db = SQLAlchemy(app)

# Email Configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # Mail Provider
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = '23f2002668@ds.study.iitm.ac.in'
app.config['MAIL_PASSWORD'] = 'eodq jcco gpjg vohz'  # Gmail App Password
app.config['MAIL_DEFAULT_SENDER'] = '23f2002668@ds.study.iitm.ac.in'
mail = Mail(app)

# Celerey Configuration
def celery_job(app):
    celery = Celery(
        app.import_name,
        broker='redis://localhost:6379/0',
        backend='redis://localhost:6379/0'
    )
    celery.conf.update(app.config)
    return celery

celery = celery_job(app)



# Define Database Table
class UserDetails(db.Model):
    # It is used to naming table 'UserDetails' as by default it names the table 'user_details'
    __tablename__ = "UserDetails"
    SrNo = db.Column(db.Integer, autoincrement=True, primary_key=True)
    Type = db.Column(db.String(20))
    Name = db.Column(db.String(50))
    UserName = db.Column(db.String(50), unique=True)
    Mail = db.Column(db.String(50), unique=True)
    Mobile = db.Column(db.String(15), unique=True)
    Qualification = db.Column(db.String(30))
    DOB = db.Column(db.String(10))
    Gender = db.Column(db.String(30))
    Country = db.Column(db.String(50))
    Password = db.Column(db.String(50))
    Time = db.Column(db.String(20))

# Define Database Table
class QuizData(db.Model):
    # It is used to naming table 'UserDetails' as by default it names the table 'user_details'
    __tablename__ = "QuizData"
    SrNo = db.Column(db.Integer, autoincrement=True, primary_key=True)
    Name = db.Column(db.String(50))
    UserName = db.Column(db.String(50))
    QuizName = db.Column(db.String(100))
    QuizSubject = db.Column(db.String(50))
    QuizTopic = db.Column(db.String(100))
    TotalQuestions = db.Column(db.NUMERIC())
    UserMarks = db.Column(db.NUMERIC())
    MaxMarks = db.Column(db.NUMERIC())
    Duration = db.Column(db.String(10))
    Mail = db.Column(db.String(50))
    Time = db.Column(db.String(20))

# Define Database Table
class QuizDetails(db.Model):
    # It is used to naming table 'UserDetails' as by default it names the table 'user_details'
    __tablename__ = "QuizDetails"
    SrNo = db.Column(db.Integer, autoincrement=True, primary_key=True)
    Name = db.Column(db.String(50))
    Subject = db.Column(db.String(50))
    Topic = db.Column(db.String(100))
    TotalQuestions = db.Column(db.NUMERIC())
    TotalTime = db.Column(db.String(10))
    Time = db.Column(db.String(20))

# Create the Defined Tables
@app.before_request
def CreateTable():
    db.create_all()


# Create folder for user files
subprocess.run(f"mkdir ./Documents", shell=True)

# File folder for inserting files generating by user so that they can be deleted at last
files = []


# Encryption for pdf generated through reportlab to being altered by user without permission
password_ = "#nhd95%GHMSTS$*&%$#@!&NVVFS<ALODHDYCThdbfgs882302475hGVGS&93454ncdd86542y45n58&%#$@NDHDUE_dhbhbcjdi-fbhfh8462^^*#njjdHHDVsmjdgf"


# Hash Password
def hash_password(password):
    hashed_password = sha256_crypt.hash(password)
    return hashed_password

def verify_password(entered_password, stored_hashed_password):
    return sha256_crypt.verify(entered_password, stored_hashed_password)


@app.route("/")
def home():
    return render_template("index.html")

@app.route("/registration", methods=['POST'])
def registration():
    try:
        data = request.get_json()  # Get the JSON data from the frontend

        # Extract data
        name = data.get('name')
        username = data.get('username')
        email = data.get('email')
        mobile = data.get('mobile')
        qualification = data.get('qualification')
        dob = data.get('dob')
        gender = data.get('gender')
        country = data.get('country')
        password = data.get('password')
        confirmPassword = data.get('confirmPassword')

        if password != confirmPassword:
            return jsonify({'message': 'Passwords do not match'}), 400

        password = hash_password(password)

        t = time.ctime()

        con = sqlite3.connect('instance/QuizMaster.sqlite3')
        cur = con.cursor()
        query = f"""INSERT INTO UserDetails (Type, Name, UserName, Mail, Mobile, Qualification, DOB, Gender, Country, Password, Time)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
        cur.execute(query, ("User", name, username, email, mobile, qualification, dob, gender, country, password, t))
        con.commit()
        con.close()
        return jsonify({'message': 'Registration successful'}), 200

    except Exception as e:
        return jsonify({'message': str(e)}), 500

otp_dict = {}

@app.route("/login", methods=['POST'])
def login():
    data = request.get_json()
    mail = data.get("mail")
    password = data.get("password")
    Type = data.get("Type")

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Type, Password FROM UserDetails WHERE Mail=?"""
    res = cur.execute(query, (mail,))
    userData = res.fetchall()

    print(mail, password, Type, userData)

    if userData:
        type_, cpassword = userData[0][0], userData[0][1]
    else:
        type_, cpassword = "", ""

    if Type == "password" :
        cond = verify_password(password, cpassword)
        print(f"Condition : {cond}")

        if cond:
            return jsonify({
                "success": True,
                "message": "Login successful",
                "type": type_
            }), 200

    else :
        if password == otp_dict[mail] :
            return jsonify({
                "success": True,
                "message": "Login successful",
                "type": type_
            }), 200

    return jsonify({
        "success": False,
        "message": "Incorrect Credentials",
    }), 400

@app.route("/forgotPassword", methods=['GET', 'POST'])
def forgotPassword():
    return render_template("forgotPassword.html")

@app.route("/adminDashboard/<string:mail>", methods = ["GET"])
def adminDashboard(mail):
    if not mail:
        return jsonify({"error": "Email is required"}), 400


    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Type, Name, UserName, Mail, Mobile, Qualification, DOB, Gender, Country, Time FROM UserDetails"""
    res = cur.execute(query)
    userData = res.fetchall()

    query = f"""SELECT Name, Subject, Topic, TotalQuestions, Time FROM QuizDetails"""
    res = cur.execute(query)
    quizData = res.fetchall()

    admin = ""

    for i in userData:
        if i[0] == "Admin":
            admin = i[1]


    return jsonify({
        "admin": admin,
        "userData": userData,
        "quizData": quizData,
    }), 200


@app.route("/userDashboard/<string:mail>", methods = ["GET"])
def userDashboard(mail):
    if not mail:
        return jsonify({"error": "Email is required"}), 400


    # Create folder for user for adding user files like report, csv data, etc.
    subprocess.run(f"mkdir ./Documents/{mail}", shell=True)

    # Create folder for user for adding user files like images.
    subprocess.run(f"mkdir ../frontend/src/assets/{mail}", shell=True)

    data1 = {
        "Name": "",
        "UserName": "",
        "QuizName": "",
        "QuizSubject": "",
        "QuizTopic": "",
        "TotalQuiz": 0,
        "TotalQuestions": 0,
        "userMarks": 0,
        "MaxMarks": 0,
        "Mail": "",
        "Time": ""
    }

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = f"""SELECT Name, UserName FROM UserDetails WHERE Mail=?"""
    res = cur.execute(query, (mail,))
    UserData = res.fetchall()

    for i in UserData :
        data1["Name"] = i[0]  # Name
        data1["UserName"] = i[1]  # UserName
        data1["Mail"] = mail

    query = f"""SELECT Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Mail, Time FROM QuizData WHERE Mail=?"""
    res = cur.execute(query, (mail,))
    QuizData = res.fetchall()


    content, totalQuiz = [], 0
    for i in QuizData:
        totalQuiz += 1
        content.append(i)



    QuizSubject, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], []

    obtMarks, totMarks = 0, 0
    count = 0

    for i in content:
        count += 1
        data1["QuizName"] = i[2]  # QuizName
        data1["QuizSubject"] = i[3]  # QuizSubject
        data1["QuizTopic"] = i[4]  # QuizTopic
        data1["TotalQuiz"] = totalQuiz  # TotalQuiz
        data1["TotalQuestions"] += i[5]  # TotalQuestions
        data1["userMarks"] += i[6]  # userMarks
        obtMarks = i[6]
        data1["MaxMarks"] += i[7]  # MaxMarks
        totMarks = i[7]
        data1["Time"] = i[9]
        d = i[9][:11] + i[9][20:]

        '''if (count <= 10):
            QuizSubject.append(i[3])  # QuizSubject
            TotalQuestions.append(i[5])
            userMarks.append(i[6])  # userMarks
            MaxMarks.append(i[7])  # MaxMarks
            Time.append(d)
            try:
                success = round((obtMarks * 100 / totMarks ))
            except:
                succeess = 0
            SuccessRate.append(success)'''


    query = f"""SELECT Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Mail, Time FROM QuizData WHERE Mail=? ORDER BY Time DESC LIMIT 10"""
    res = cur.execute(query, (mail,))
    QuizData = res.fetchall()

    for i in QuizData:
        print(i)
        QuizSubject.append(i[3])  # QuizSubject
        TotalQuestions.append(i[5])
        userMarks.append(i[6])  # userMarks
        MaxMarks.append(i[7])  # MaxMarks
        d = i[9][:11] + i[9][20:]
        Time.append(d)

        obtMarks = i[6]
        totMarks = i[7]

        try:
            success = round((obtMarks * 100 / totMarks ), 4)
        except:
            succeess = 0

        SuccessRate.append(success)

    data1["userMarks"] = round(data1["userMarks"], 4)
    data1["MaxMarks"] = round(data1["MaxMarks"], 4)


    data2 = {"QuizSubject": QuizSubject,
             "TotalQuestions": TotalQuestions,
             "userMarks": userMarks,
             "MaxMarks": MaxMarks,
             "SuccessRate": SuccessRate,
             "Time": Time
             }


    time, success, failure = [""] * 10, [0] * 10, [0] * 10

    print(Time)
    print(SuccessRate)

    for i in range(len(Time)):
        time[i] = Time[i]
        success[i] = SuccessRate[i]
        failure[i] = round((100 - SuccessRate[i]), 4)

    evaluationChart(mail, data1["userMarks"], data1["MaxMarks"], time, success, failure)

    print(data1)

    return jsonify(data1, data2), 200

def evaluationChart(email, obtainedMarks, maxMarks, dates, success, failure):
    # Pie Chart
    try:
        successRate = round((obtainedMarks * 100 / maxMarks), 2)
    except:
        successRate = 0

    failureRate = round((100 - successRate), 2)
    labels = ['Success \nRate', 'Failure\nRate']
    x = [successRate, failureRate]
    colors = ['#66B032', '#FF6F61']
    explode = (0, 0.085)  # Slightly explode the "Success" slice as well (you can tweak as needed)

    # Plotting the pie chart
    plt.figure(figsize=(10, 8))  # Set figure size
    plt.pie(x, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', wedgeprops={'linewidth': 2, 'edgecolor': 'white'}, shadow=True, startangle=250, textprops={'color': 'white', 'fontsize': 20, 'fontfamily': 'Times New'})  # Optional: add boldness to text

    # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.axis('equal')

    # Title
    plt.title('Overall Quiz Evaluation', fontdict={'fontweight': 'bold', 'fontsize': 28, 'fontfamily': 'Palatino', 'color': 'White'})

    # Save the chart with transparent background
    plt.savefig(f"../frontend/src/assets/{email}_overallEvaluation.png", transparent=True)

    files.append(f"../frontend/src/assets/{email}_overallEvaluation.png")

    # *********************************************************************************************************************************************** #

    labels = dates  # X-axis labels (dates)
    success = success  # Y-axis values

    for i in range(len(success)):
        if success[i] == 0 :
            success[i] = success[i]+1

    num_bars = len(labels)

    print(success)

    plt.figure(figsize=(10, 7))  # Increase figure size for better visualization

    # **Create evenly spaced positions for bars**
    x_pos = np.arange(num_bars)

    # **Adjust Bar Width Dynamically**
    bar_width = max(0.3, min(0.6, 6 / num_bars))  # Ensures bars have good spacing

    # **Color Gradient for Bars**
    colors = ["#fd7f6f", "#7eb0d5", "#b2e061", "#bd7ebe", "#ffb55a", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7"]

    # **Plot bars with corrected positioning**
    bars = plt.bar(x_pos, success, width=bar_width, color=colors, edgecolor='white', linewidth=2)

    # **Title and Labels**
    plt.title('\nLast - 10 Quizzes Evaluation\n', fontsize=28, fontweight='bold', color='White', fontfamily='Palatino', pad=50)
    plt.xlabel('\nDate\n', fontsize=25, labelpad=10, fontfamily='Palatino', color='White')
    plt.ylabel('\nSuccess Rate\n', fontsize=25, labelpad=10, fontfamily='Palatino', color='White')
    plt.ylim(0, 100)

    # **Apply Correct X-Ticks**
    plt.xticks(x_pos, labels, rotation=45, fontsize=15, fontweight='bold', color='white')  # Now, labels match x_pos
    plt.yticks(fontsize=15, fontweight='bold', color='white')

    # **Style Improvements**
    plt.gca().spines[['top', 'right']].set_visible(False)  # Hide top & right border
    plt.grid(axis='y', linestyle='--', alpha=0.7)  # Light grid for readability

    # **Add percentage labels above bars**
    for bar in bars:
        height = bar.get_height()
        if height == 1 :
            height = 0
        plt.text(bar.get_x() + bar.get_width() / 2, height + 3, f'{height:.1f}%', ha='center', fontsize=12, color='white')

    # **Save & Show the Chart**
    plt.savefig(f"../frontend/src/assets/{email}_10DaysEvaluation.png", transparent=True, bbox_inches='tight', dpi=300)

    files.append(f"../frontend/src/assets/{email}_10DaysEvaluation.png")


@app.route("/prepration", methods=['GET', 'POST'])
def prepration():
    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)
    subjects = []
    for subject in subjects_dict.values():
        subjects.append([subject[0], subject[1]])
    return render_template("prepration.html", subjects=subjects)

@app.route("/api/subjects", methods=['GET', 'POST'])
def subjects():
    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)
    subjects = []
    for subject in subjects_dict.values():
        subjects.append([subject[0], subject[1]])
    return subjects

@app.route("/questions/<string:subject>/<string:topic>/<string:name>", methods=['GET'])
def questions(subject, topic, name):
    filename = f"jsonFiles/{subject}_{topic}_{name}.json"
    print(filename)
    try :
        with open (filename, "r") as f:
            questions_dict = json.load(f)

        data = []
        for question in questions_dict.values():
            data.append([question[0], question[1], question[2]])

        con = sqlite3.connect('instance/QuizMaster.sqlite3')
        cur = con.cursor()
        query = f"""SELECT TotalTime FROM QuizDetails WHERE Name=? AND Topic=? AND Subject=?"""
        res = cur.execute(query, (name, topic, subject, ))
        time = res.fetchone()

        if time :
            time = time[0]
    except :
        return jsonify({"message": "No quiz data found!"}), 201

    print(f"Data : {data}")

    return jsonify([data, time])

@app.route("/createQuiz", methods=['POST'])
def createQuiz():
    data = request.get_json()

    if not data:
        return jsonify({"error": "No data provided"}), 400

    print(data)

    que = {}

    QuizSubject = data["QuizSubject"]
    QuizTopic = data["QuizChapter"]
    QuizName = data["QuizName"]
    TotalTime = data["TotalTime"]
    questions = data["Questions"]
    TotalQuestions = len(questions)

    count = 0
    for i in questions:
        count += 1
        correct = ''
        if i['CorrectAnswer'].strip() == i['option1'].strip() :
            correct = "(a) " + i['option1'].strip()
        elif i['CorrectAnswer'].strip() == i['option2'].strip() :
            correct = "(b) " + i['option2'].strip()
        elif i['CorrectAnswer'] == i['option3'].strip() :
            correct = "(c) " + i['option3'].strip()
        else :
            correct = "(d) " + i['option4'].strip()

        print(f"['CorrectAnswer'] : {correct}")
        que[str(count)] = [i['question'], ['(a) '+ i['option1'], '(b) '+ i['option2'], '(c) '+ i['option3'], '(d) '+ i['option4']], correct]

    filename = f"./jsonFiles/{QuizSubject}_{QuizTopic}_{QuizName}.json"

    with open(filename, 'w') as f:
        json.dump(que, f)

    Time = time.ctime()

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query0 = """DELETE FROM QuizDetails WHERE Name = ? AND Subject = ? AND Topic = ?"""
    res0 = cur.execute(query0, ("Null", QuizSubject, QuizTopic, ))

    query1 = """DELETE FROM QuizDetails WHERE Name = ? AND Subject = ? AND Topic = ?"""
    res1 = cur.execute(query1, (QuizName, QuizSubject, QuizTopic, ))

    query2 = """INSERT INTO QuizDetails (Name, Subject, Topic, TotalQuestions, TotalTime, Time) VALUES (?, ?, ?, ?, ?, ?)"""
    res2 = cur.execute(query2, (QuizName, QuizSubject, QuizTopic, TotalQuestions, TotalTime, Time, ))
    name = res2.fetchall()
    con.commit()
    con.close()

    return jsonify({"message": "Quiz created successfully!"}), 201

@app.route("/remove", methods=['GET'])
def remove():
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, Mail FROM UserDetails WHERE Type=?"""
    res = cur.execute(query, ("User", ))
    userData = res.fetchall()

    print(userData)


    query = f"""SELECT Name, Subject, Topic FROM QuizDetails"""
    res = cur.execute(query)
    quizData = res.fetchall()

    return jsonify({
        "userData": userData,
        "quizData": quizData,
    }), 200

@app.route("/removeUser/<string:mail>", methods=['DELETE'])
def removeUser(mail):
    try:
        con = sqlite3.connect('instance/QuizMaster.sqlite3')
        cur = con.cursor()

        query = f"DELETE FROM UserDetails WHERE Mail = ?"
        cur.execute(query, (mail,))
        con.commit()

        query = f"DELETE FROM QuizData WHERE Mail = ?"
        cur.execute(query, (mail,))
        con.commit()

        return jsonify({"message": "Quiz removed successfully"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/removeQuiz/<string:quiz_name>", methods=['DELETE'])
def removeQuiz(quiz_name):
    try:
        con = sqlite3.connect('instance/QuizMaster.sqlite3')
        cur = con.cursor()

        query = f"DELETE FROM QuizDetails WHERE Name = ?"
        cur.execute(query, (quiz_name,))
        con.commit()

        filename = f"jsonFiles/{quiz_name}.json"

        subprocess.run(f"rm -f {filename}", shell=True)

        return jsonify({"message": "Quiz removed successfully"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/quizTopics/<string:subject>/<string:email>/", methods=['GET'])
def quizTopics(subject, email):
    if not subject:
        return jsonify({"error": "Subject is required"}), 400

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, Topic, TotalQuestions, TotalTime FROM QuizDetails WHERE Subject=?"""
    res = cur.execute(query, (subject,))
    data = res.fetchall()

    names, chapters, total_questions, total_time, scores, new, integrity = [], [], [], [], [], [], []

    for i in data :
        if i[2] != 0:
            names.append(i[0])
            chapters.append(i[1])
            total_questions.append(i[2])
            total_time.append(i[3])
            query = """SELECT UserMarks, MaxMarks FROM QuizData WHERE Mail=? AND QuizName=? AND QuizSubject=? AND QuizTopic=?"""
            d = cur.execute(query, (email, i[0], subject, i[1], ))
            d = d.fetchone()

            if d :
                user_marks = d[0]
                max_marks = d[1]
                if max_marks == 0 :
                    score = 0
                else :
                    score = round((user_marks * 100 / max_marks), 2)
                scores.append(score)
            else :
                scores.append('')

    con.close()

    print(f"Subject : {chapters}")

    return jsonify({
        "names": names,
        "topics": chapters,
        "totalQuestions": total_questions,
        "time": total_time,
        "scores": scores
    })

@app.route('/quizTime/<subject>/<topic>/<quiz>', methods=['POST'])
def quizTime(subject, topic, quiz):
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT TotalTime FROM QuizDetails WHERE Name=? AND Topic=? AND Subject=?"""
    res = cur.execute(query, (quiz, topic, subject, ))
    time = res.fetchone()

    if time :
        time = time[0]

    return jsonify({"time": time,})


@app.route('/submitQuiz', methods=['POST'])
def submitQuiz():
    data = request.get_json()

    if not data or 'answers' not in data:
        return jsonify({"error": "No answers provided"}), 400

    answers = data['answers']
    quizName = data["name"]
    topic = data["topic"]
    subject = data["subject"]
    mail = data["mail"]

    score = 0

    print(answers)

    for answer in answers:
        print(answer["selectedAnswer"] == answer["correctAnswer"])
        if answer["selectedAnswer"] == answer["correctAnswer"]:
            score += 1

    print("Score :", score)

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName FROM UserDetails WHERE Mail=?"""
    res = cur.execute(query, (mail, ))
    userData = res.fetchone()
    name, userName = userData[0], userData[1]

    res = cur.execute("PRAGMA table_info(QuizDetails)")
    print("QuizDetails columns:", res.fetchall())

    query = f"""SELECT TotalQuestions, TotalTime FROM QuizDetails WHERE Name=? AND Topic=? AND Subject=?"""
    res = cur.execute(query, (quizName, topic, subject, ))
    quiz_data = res.fetchone()
    totalQuestions, duration = quiz_data[0], quiz_data[1]

    t = time.strftime("%d/%m/%Y %H:%M:%S")

    print("subject :", subject)

    query = f"""INSERT INTO QuizData(Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Duration, Mail, Time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
    res = cur.execute(query, (name, userName, quizName, subject, topic, totalQuestions, score, totalQuestions, duration, mail, t, ))
    con.commit()
    con.close()


    quizData(mail, subject, topic, quizName)

    filename = f"Documents/{subject}_{topic}_{quizName}.pdf"
    send_email("Shahzada Moon", "shahzadamoon", mail, filename)

    return jsonify({"message": "Quiz submitted successfully", "score": score}), 200


@app.route("/quiz", methods=['GET', 'POST'])
def quiz():
    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)
    subjects = []
    for subject in subjects_dict.values():
        subjects.append([subject[0], subject[1]])
    return render_template("quiz.html", subjects=subjects)

@app.route("/leaderBoard", methods=['GET'])
def leaderBoard():
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, QuizName, UserMarks, Mail FROM QuizData ORDER BY UserMarks DESC LIMIT 10"""
    res = cur.execute(query)
    QuizData = res.fetchall()
    con.close()

    leaderboard = []
    for index, row in enumerate(QuizData):
        leaderboard.append({
            'rank': index + 1,
            'name': row[0],
            'username': row[1],
            'quizname': row[2],
            'userMarks': row[3]
        })

    return jsonify(leaderboard)


@app.route("/timedQuiz", methods=['GET', 'POST'])
def timedQuiz():
    return render_template("timedQuiz.html")


@app.route("/addSubject", methods=["POST"])
def addSubject() :
    subject = request.form.get('subject')
    image = request.files.get('image')

    if not subject :
        return jsonify({"error": "No subject provided"}), 400

    if image :
        imgname = image.filename
        ext = imgname.split('.')[-1]
        new_name = secure_filename(f"{subject}.{ext}")
        image.save(os.path.join("../public/uploads/", new_name))
        data = [subject, new_name]
    else :
        data = [subject, '']

    subjects_dict = {}

    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)

    subjects_dict[subject.title()] = data

    with open('Subjects.json', 'w') as f:
        json.dump(subjects_dict, f, indent=4)

    return jsonify({"message": "Subject added successfully"}), 200


@app.route("/editSubject/<subject>/<newSubject>/", methods=["PATCH"])
def editSubject(subject, newSubject) :
    subject = unquote(subject)
    newSubject = unquote(newSubject)
    subjects_dict = {}

    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)

    img = glob.glob(f"../public/uploads/{subject}.*")
    new_img = img.copy()
    if img :
        img = img[0]
        ext = img.split(".")[-1]
        new_img = f"{newSubject}.{ext}"
        new_path = f"../public/uploads/{new_img}"
        subprocess.run(f"mv {img} {new_path}", shell=True)

    data = subjects_dict[subject]
    data[0] = newSubject
    data[1] = new_img
    subjects_dict[newSubject] = data
    subjects_dict.pop(subject, None)

    with open('Subjects.json', 'w') as f:
        json.dump(subjects_dict, f, indent=4)

    return jsonify({"message": "Subject has edited successfully"}), 200


@app.route("/deleteSubject/<subject>/", methods=["DELETE"])
def deleteSubject(subject) :
    subjects_dict = {}

    with open ("Subjects.json", "r") as f:
        subjects_dict = json.load(f)

    subjects_dict.pop(subject.title(), None)

    with open('Subjects.json', 'w') as f:
        json.dump(subjects_dict, f, indent=4)

    return jsonify({"message": "Subject has deleted successfully"}), 200


@app.route("/chapters/<subject>/", methods=['GET', 'POST'])
def chapters(subject):

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = """SELECT Topic FROM QuizDetails WHERE Subject=?"""
    res = cur.execute(query, (subject, ))
    d = res.fetchall()
    con.close()

    topics = []

    if d :
        for i in d :
            if i[0].strip() not in topics :
                topics.append(i[0])

    return jsonify({
        "topics": topics
    }), 200


@app.route("/addChapter/", methods=["GET", "POST"])
def addChapter() :
    chapter = request.form.get('chapter')
    subject = request.form.get('subject')

    print(subject, chapter)

    if not chapter or not subject :
        return jsonify({"error": "No subject or chapter provided"}), 400

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    t = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    query = """INSERT INTO QuizDetails (Name, Subject, Topic, TotalQuestions, TotalTime, Time) VALUES (?, ?, ?, ?, ?, ?)"""
    res = cur.execute(query, ('Null', subject, chapter, 0, '', t, ))
    con.commit()
    con.close()

    return jsonify({"message": "Chapter added successfully"}), 200

@app.route("/editChapter/<subject>/<chapter>/<newChapter>/", methods=["PATCH"])
def editChapter(subject, chapter, newChapter) :
    subject = unquote(subject)
    chapter = unquote(chapter)
    newChapter = unquote(newChapter)

    if newChapter == 'null' :
        return jsonify({"message": "Chapter has edited successfully"}), 200

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = """UPDATE QuizDetails SET Topic = ? WHERE Subject=? AND Topic = ?"""
    res = cur.execute(query, (newChapter, subject, chapter, ))
    con.commit()
    con.close()

    return jsonify({"message": "Subject has edited successfully"}), 200

@app.route("/deleteChapter/<subject>/<chapter>/", methods=["DELETE"])
def deleteChapter(subject, chapter) :
    subject = unquote(subject)
    chapter = unquote(chapter)

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = """DELETE FROM QuizDetails WHERE Subject = ? AND Topic = ?"""
    res = cur.execute(query, (subject, chapter, ))
    con.commit()
    con.close()

    return jsonify({"message": "Subject has deleted successfully"}), 200


@app.route("/chapterQuiz/<subject>/<topic>/", methods=['GET', 'POST'])
def chapterQuiz(subject, topic):
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = """SELECT Name, TotalQuestions FROM QuizDetails WHERE Subject=? AND Topic=?"""
    res = cur.execute(query, (subject, topic, ))
    d = res.fetchall()
    con.close()

    names = []
    questions = []

    if d :
        for i in d :
            if i[0] not in names :
                names.append(i[0])
                questions.append(i[1])

    return jsonify({
        "names": names,
        "questions": questions
    }), 200


@app.route("/addQuiz/", methods=["GET", "POST"])
def addQuiz() :
    subject = request.form.get('subject')
    chapter = request.form.get('chapter')
    quiz = request.form.get('quiz')

    if not quiz or not chapter or not subject :
        return jsonify({"error": "No quiz or subject or chapter provided"}), 400

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    t = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    query = """INSERT INTO QuizDetails (Name, Subject, Topic, TotalQuestions, TotalTime, Time) VALUES (?, ?, ?, ?, ?, ?)"""
    res = cur.execute(query, (quiz, subject, chapter, 0, '', t, ))
    con.commit()
    con.close()

    return jsonify({"message": "Quiz added successfully"}), 200


@app.route("/editQuiz/<subject>/<chapter>/<old>/<quiz>/", methods=["PATCH"])
def editQuiz(subject, chapter, old, quiz) :
    subject = unquote(subject)
    chapter = unquote(chapter)
    name = unquote(old)
    new_name = unquote(quiz)

    if new_name == 'null' or new_name == 'Null':
        return jsonify({"message": "Quiz has edited successfully"}), 200

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = """UPDATE QuizDetails SET Name = ? WHERE Subject=? AND Topic = ? AND Name=?"""
    res = cur.execute(query, (new_name, subject, chapter, name, ))
    con.commit()
    con.close()

    return jsonify({"message": "Quiz has edited successfully"}), 200

@app.route("/deleteQuiz/<subject>/<chapter>/<quiz>/", methods=["DELETE"])
def deleteQuiz(subject, chapter, quiz) :
    subject = unquote(subject)
    chapter = unquote(chapter)
    quiz = unquote(quiz)

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = """DELETE FROM QuizDetails WHERE Subject = ? AND Topic = ? AND Name=?"""
    res = cur.execute(query, (subject, chapter, quiz, ))
    con.commit()
    con.close()

    return jsonify({"message": "Subject has deleted successfully"}), 200


@app.route("/editSaveQuizData/<quiz>/", methods=["POST"])
def editSaveQuizData(quiz):
    data = request.get_json()

    questions_dict = {}
    for i, q in enumerate(data["Questions"]):
        questions_dict[f"Question_{i+1}"] = [
            q["question"],
            [q["option1"], q["option2"], q["option3"], q["option4"]],
            q["CorrectAnswer"]
        ]

    filename = f"jsonFiles/{quiz}.json"
    with open(filename, "w") as f:
        json.dump(questions_dict, f, indent=2)

    return jsonify({"status": "success"})



@app.route("/editFillQuizData/<quiz>/", methods=["POST"])
def editFillQuizData(quiz):
    try:
        decoded_quiz = unquote(quiz)

        filename = f"jsonFiles/{decoded_quiz}.json"
        if not os.path.exists(filename):
            return jsonify({"error": "Quiz file not found"}), 404

        with open(filename, "r") as f:
            questions_dict = json.load(f)

        questions = [[q[0], q[1], q[2]] for q in questions_dict.values()]


        quiz_name = decoded_quiz.split(" - ")[0].strip()
        total_questions = len(questions)
        total_time = 30

        return jsonify({
            "quiz_name": quiz_name,
            "total_questions": total_questions,
            "total_time": total_time,
            "Questions": questions
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


def send_email(name, userName, email, filename):
    msg = Message('Regarding Solutions For Attempting Quiz',
                  sender='23f2002668@ds.study.iitm.ac.in',
                  recipients=[email])
    msg.body = f"Congratulations {name} (Username - '{userName}') on attempting the quiz. \n\nWe are attaching the quiz with complete solutions for verifying the answers. It will definitely help you in learning the questions which you have fotgot or not yet memorize.\n\nRegards, \nShahzada Moon\nSober Shah Quiz Application"

    appObj = current_app._get_current_object()

    with current_app.open_resource(filename) as pdf:
        msg.attach(
            filename=filename.split("/")[-1],
            content_type="application/pdf",
            data=pdf.read()
        )

    mail.send(msg)
    subprocess.run(f"rm -f '{filename}'", shell=True)
    print("Mail sent successfully !")
    return "Mail Sent Successfully !"



@celery.task(name="celery_jobs")
def celery_jobs():
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Mail, Name From UserDetails WHERE Type=?"""
    res = cur.execute(query, ("User",))
    userData = res.fetchall()

    data, emails = {}, []

    if userData :
        for i in userData :
            emails.append(i[0])
            data[i[0]] = i[1]

        print(data)
        print(emails)

        with app.app_context():  # push application context
            for email in emails :
                msg = Message(
                    subject="Daily Reminder For Attempting Quiz",
                    sender="23f2002668@ds.study.iitm.ac.in",
                    recipients=[email],
                    body=f"Hello {data[email]} ! How is it going ? \n\nI hope you are doing well. \n\nNow, this is the time for attempting quiz too be more smarter. The leaderboard is waiting fot you to make on top. \n\nAttempt quiz and be ahead of others. \n\nWarm Regards, \nShahzada Moon \n'Sober Shah Quiz Application'"
                )
                try:
                    mail.send(msg)
                    print("Mail sent !")
                except Exception as e:
                    print(f"Error in sending mail")

    else :
        print("No data found!")
        return("No data found!")



celery.conf.beat_schedule = {
    'send-daily-mail-every-morning': {
        'task': 'celery_jobs',
        'schedule': crontab(hour=9, minute=0),
    },
}

celery.conf.timezone = 'Asia/Kolkata'


@app.route("/forgot_password/<email>", methods=["GET", "POST"])
def forgot_password(email):
    print(email)
    msg = Message('OTP For Reseting Password',
                  sender='23f2002668@ds.study.iitm.ac.in',
                  recipients=[email])

    num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    alp = list(ascii_letters)
    l = num+alp
    random.shuffle(l)
    l = random.choices(l, k=8)

    otp = ''

    for i in l:
        otp += i

    otp_dict[email] = otp

    msg.body = f"Your OTP for reseting password is {otp} !"
    #mail.send(msg)
    print(f"Otp ({otp}) send successfully !")
    return jsonify({"Message": "OTP sent successfully!", "OTP": otp}), 200


@app.route("/pdf_report/<email>/<username>", methods=["GET", "POST"])
def pdf_report(email, username) :

    send_pdf_report(email)

    filename = f"Documents/{email}/{email}_Report.pdf"

    '''
    msg = Message('Regarding Quiz Report',
                  sender='23f2002668@ds.study.iitm.ac.in',
                  recipients=[email])
    msg.body = f"Dear participant, \n\nWe hope you are fine and doing well. \n\nWe are attaching your monthly evaluation report of your attempted quizzes.\n\nRegards, \nShahzada Moon\nSober Shah Quiz Application"

    appObj = current_app._get_current_object()

    with current_app.open_resource(filename) as pdf:
        msg.attach(
            filename=filename.split("/")[-1],
            content_type="application/pdf",
            data=pdf.read()
        )

    mail.send(msg)
    subprocess.run(f"rm -f '{filename}'", shell=True)
    print("Mail sent successfully !")
    return "Congratulations! Evaluation report has been sent successfully on your registered email id."
    '''

    files.append(filename)

    return send_file(filename, as_attachment=True, download_name=f"{username}_Report.pdf", mimetype="application/pdf")


@app.route("/html_report/<email>/<username>", methods=["GET", "POST"])
def html_report(email, username) :

    send_html_report(email)

    filename = f"Documents/{email}/{email}_Report.html"

    files.append(filename)

    return send_file(filename, as_attachment=True, download_name=f"{username}_Report.html", mimetype="application/pdf")


@app.route("/csv_data/<email>/<username>", methods=["GET", "POST"])
def csv_data(email, username) :

    send_csv_data(email)

    filename = f"Documents/{email}/{email}_Quiz_Data.csv"

    files.append(filename)

    return send_file(filename, as_attachment=True, download_name=f"{username}_Quiz_Data.csv", mimetype="application/pdf")



def quizData(mail, subject, topic, quiz_name):

    print(subject)

    filename = f"jsonFiles/{subject}_{topic}_{quiz_name}.json"

    with open (filename, "r") as f:
        questions_dict = json.load(f)

    data = []
    for question in questions_dict.values():
        data.append([question[0], question[1], question[2]])

    questions = {}
    for i in data :
        questions[i[0]] = [i[1], i[2]]

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = "SELECT TotalQuestions, TotalTime FROM QuizDetails WHERE Name=? AND Subject=? AND Topic=?"

    cur.execute(query, (quiz_name, subject, topic, ))
    data = cur.fetchall()[0]
    total, duration = 0, ''

    if data[0] :
        total = data[0]
    if data[1] :
        duration = data[1] + " seconds"

    # Set Page-Width And Height
    page_width, page_height = A4

    # Set Margins
    margin = 0.5 * inch           # For setting margin in all sides
    right_margin = 1 * inch     # For setting margin in right side

    styles = getSampleStyleSheet()
    style = styles["Normal"]

    # Create PDF And Its Object
    filename = f"{subject}_{topic}_{quiz_name}.pdf"

    # Encryption
    t = time.ctime()
    password_ = f"{t}{subject}#n{quiz_name}hd9{topic}{quiz_name}{quiz_name}5%G{mail}HMSTS{subject}{topic}{topic}{topic}$*&%{mail}$#@!&N{quiz_name}VV{t}FS<ALOD{subject}HDYCTh{topic}{topic}dbfgs882302{mail}475hGVGS{t}&93454nc{quiz_name}dd8654{subject}2y{topic}45n5{t}8&%#$@NDHDUE_d{quiz_name}hbhbcjdi-{mail}fbhfh8462^^{subject}*#njjdHHDVsmjd{t}{quiz_name}gf#nh{t}d95%GHM{mail}STS$*&{subject}%$#@!&NVVFS<ALODHDY{topic}CThdbfgs882302{mail}475hGVGS&93454ncdd86{subject}542y45n58&%#${quiz_name}@ND{t}HDUE_dhbhbcjdi-fbhf{t}h846{subject}2^^*#njjdHHDVsmjd{t}gf#nhd9{mail}5%GHMST{quiz_name}S$*&%${t}#@!&NV{quiz_name}VFS<AL{t}ODHDYCThdbfgs88{subject}2302475{mail}hGVGS&93454ncdd8654{t}{t}{t}{t}2y45n58&%{mail}#$@NDHD{subject}{subject}UE_dhbhbcjdi-fbhfh846{topic}{topic}2^^*#{mail}{mail}{mail}n{t}jjdHHDV{topic}{subject}{topic}{topic}smjdgf"
    encrypt = pdfencrypt.StandardEncryption(
        userPassword="",            # No Password required to open the file by user
        ownerPassword=password_,   # Password for changing permissions
        canPrint=1,                 # Allow printing
        canModify=0,                # Disallow editing
        canCopy=0,                  # Disallow copy-paste
        canAnnotate=0               # Disallow annotations
    )

    pdf = SimpleDocTemplate(f"./Documents/{filename}", encrypt=encrypt, pagesize=A4, topMargin=0.5*inch, bottomMargin=0.5*inch, leftMargin=0.5*inch, rightMargin=0.5*inch)

    # Calculate the starting x-coordinate for right-aligned text
    x = page_width - right_margin

    # Define a Paragraph
    para = []

    # Define Styles
    textStyle1 = ParagraphStyle(name='CustomStyle', fontName='Courier', fontSize=20, leading=20, alignment=TA_CENTER, textColor=colors.HexColor('#C11B17'))
    textStyle2 = ParagraphStyle(name='CustomStyle', fontName='Courier', fontSize=14, leading=20, alignment=TA_LEFT)

    # Adding Title
    title = f"<b>{quiz_name} Solutions</b>"
    para.append(Paragraph(title, textStyle1))
    para.append(Spacer(width=1*inch, height=1*inch))

    tableData = [[Paragraph(""), Paragraph("", styles['Normal']), Paragraph(f"", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Quiz Subject</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{subject}</b></font>", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Quiz Chapter</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{topic}</b></font>", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Quiz Name</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{quiz_name}</b></font>", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Total Questions</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{total}</b></font>", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Duration</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{duration}</b></font>", styles['Normal'])],
                 [Paragraph("<font name='Courier' size=12><b>Date</b></font>"), Paragraph("<b>: </b>", styles['Normal']), Paragraph(f"<font name='Courier' size=12 color='Blue'><b>{datetime.now().strftime('%d/%m/%Y')}</b></font>", styles['Normal'])],
                 [Paragraph(""), Paragraph("", styles['Normal']), Paragraph(f"", styles['Normal'])],
                 [Paragraph(""), Paragraph("", styles['Normal']), Paragraph(f"", styles['Normal'])]]

    t = Table(tableData, colWidths=[2*inch, 0.5*inch, 4*inch], style=[
        ('BOX',(0,0),(2,8), 1, colors.grey),
        ('ALIGN',(0,1),(2,8), 'LEFT'),
    ])

    para.append(t)
    para.append(Spacer(width=0, height=1*inch))

    count = 1

    for data in questions :

        text1 = f"<font name='Courier' size=11><b>Question-{count} : </b></font> <font name='Courier' size=11><i> &nbsp;{ data }</i></font>"
        para.append(Paragraph(text1, styles['Normal']))
        para.append(Spacer(width=1*inch, height=0.1*inch))

        text2 = f"<font name='Courier' size=11 color='blue'><i>{questions[data][0][0]} <br/>{questions[data][0][1]} <br/>{questions[data][0][2]} <br/>{questions[data][0][3]}</i></font>"
        para.append(Paragraph(text2, styles['Normal']))
        para.append(Spacer(width=1*inch, height=0.1*inch))

        correct = ''

        if questions[data][0][0].strip() == '(a) ' + questions[data][1].strip() :
            correct = '(a) '
        elif questions[data][0][1].strip() == '(b) ' + questions[data][1].strip() :
            correct = '(b) '
        elif questions[data][0][2].strip() == '(c) ' + questions[data][1].strip() :
            correct = '(c) '
        elif questions[data][0][3].strip() == '(d) ' + questions[data][1].strip() :
            correct = '(d) '
        else :
            correct = ''

        text3 = f"<font name='Courier' size=11 color='Green'><b>Correct Answer :</b> <i> &nbsp;{correct}{questions[data][1]}</i></font>"
        para.append(Paragraph(text3, styles['Normal']))
        para.append(Spacer(width=1*inch, height=0.5*inch))

        count += 1


    text11 = """<font size=12>******************************************** Finished *********************************************</font>"""
    para.append(Spacer(width=1*inch, height=0.75*inch))
    para.append(Paragraph(text11, styles['Normal']))

    # Build The PDF With Paragraph
    print(f"Saving PDF file to: {filename}")
    pdf.build(para)



def send_pdf_report(email) :
    pdf_data(email)

def pdf_data(email) :
    print("Fetching pdf data . . . . . ")

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Mail, Time FROM QuizData WHERE Mail=?"""
    res = cur.execute(query, (email,))
    QuizData = res.fetchall()
    content, totalQuiz = [], 0
    for i in QuizData:
        totalQuiz += 1
        content.append(i)

    QuizSubject, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], []
    January, February, March, April, May, June, July, August, September, October, November, December = [], [], [], [], [], [], [], [], [], [], [], []
    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    months = [January, February, March, April, May, June, July, August, September, October, November, December]
    obtainedMarks, maxMarks = {}, {}

    data1 = {"Name": "",
             "UserName": "",
             "QuizName": "",
             "QuizSubject": "",
             "QuizTopic": "",
             "TotalQuiz": 0,
             "TotalQuestions": 0,
             "userMarks": 0,
             "MaxMarks": 0,
             "Mail": "",
             "Time": ""
             }

    for i in content :
        date = datetime.now().strftime('%d/%m/%Y')
        year = date.split('/')[2].split(" ")[0]

        if i[9].split('/')[2].split(" ")[0] == year :
            if i[9].split('/')[1] == '01' :
                January.append(i)
            elif i[9].split('/')[1] == '02' :
                February.append(i)
            elif i[9].split('/')[1] == '03' :
                March.append(i)
            elif i[9].split('/')[1] == '04' :
                April.append(i)
            elif i[9].split('/')[1] == '05' :
                May.append(i)
            elif i[9].split('/')[1] == '06' :
                June.append(i)
            elif i[9].split('/')[1] == '07' :
                July.append(i)
            elif i[9].split('/')[1] == '08' :
                August.append(i)
            elif i[9].split('/')[1] == '09' :
                September.append(i)
            elif i[9].split('/')[1] == '10' :
                October.append(i)
            elif i[9].split('/')[1] == '11' :
                November.append(i)
            else :
                December.append(i)

    subjects, chapters, quiz_names, total_que, userMarks, MaxMarks, success, failure, dates = {}, {}, {}, {}, {}, {}, {}, {}, {}


    for mon in range(12) :
        (sb, ch, qn, tq, um, mm, s, f, t) = mon_data(months[mon])
        subjects[month_names[mon]], chapters[month_names[mon]], quiz_names[month_names[mon]], total_que[month_names[mon]], userMarks[month_names[mon]], MaxMarks[month_names[mon]], success[month_names[mon]], failure[month_names[mon]], dates[month_names[mon]] = sb, ch, qn, tq, um, mm, s, f, t
        EvaluationChartForReports(email, userMarks[month_names[mon]], MaxMarks[month_names[mon]], success[month_names[mon]], failure[month_names[mon]], dates[month_names[mon]], month_names[mon])

    print(August)

    make_pdf_report(email, subjects, chapters, quiz_names, total_que, userMarks, MaxMarks, success, failure, dates, month_names)


def mon_data(data) :
    QuizSubjects, Chapters, QuizNames, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], [], [], []
    obtMarks, totMarks = 0, 0
    count = 0

    data1 = {"Name": "",
             "UserName": "",
             "QuizName": "",
             "QuizSubject": "",
             "QuizTopic": "",
             "TotalQuiz": 0,
             "TotalQuestions": 0,
             "userMarks": 0,
             "MaxMarks": 0,
             "Mail": "",
             "Time": ""
             }

    tot, ch, qn = 0, '', ''

    for i in data:
        count += 1
        data1["Name"] = i[0]  # Name
        data1["UserName"] = i[1]  # UserName
        data1["QuizName"] = i[2]  # QuizName
        data1["QuizSubject"] = i[3]  # QuizSubject
        data1["QuizTopic"] = i[4]  # QuizTopic
        data1["TotalQuiz"] = len(data)  # TotalQuiz
        data1["TotalQuestions"] += i[5]  # TotalQuestions
        data1["userMarks"] += i[6]  # userMarks
        obtMarks = i[6]
        data1["MaxMarks"] += i[7]  # MaxMarks
        totMarks = i[7]
        data1["Mail"] = i[8]
        data1["Time"] = i[9]
        tot += i[5]
        ch = i[4]
        qn = i[2]
        QuizSubjects.append(i[3])
        Chapters.append(ch)
        QuizNames.append(qn)
        TotalQuestions.append(i[5])
        userMarks.append(obtMarks)
        MaxMarks.append(totMarks)
        Time.append(i[9])

        try:
            success = round((obtMarks * 100 / totMarks ))
        except:
            succeess = 0

        SuccessRate.append(success)


    data2 = {"QuizSubject": QuizSubjects,
             "TotalQuestions": TotalQuestions,
             "userMarks": userMarks,
             "MaxMarks": MaxMarks,
             "SuccessRate": SuccessRate,
             "Time": Time
             }

    time, success, failure = [], [], []

    for i in range(len(SuccessRate)):
        time.append(Time[i])
        success.append(SuccessRate[i])
        failure.append(round((100 - SuccessRate[i]), 2))

    return (QuizSubjects, Chapters, QuizNames, TotalQuestions, userMarks, MaxMarks, success, failure, time)


def EvaluationChartForReports(email, obtainedMarks, maxMarks, success, failure, dates, mon_name):

    obt, maxx = sum(obtainedMarks), sum(maxMarks)

    # Pie Chart
    try:
        successRate = round((obt * 100 / maxx), 4)
    except:
        successRate = 0

    failureRate = round((100 - successRate), 4)
    labels = ['Success \nRate', 'Failure\nRate']
    x = [successRate, failureRate]
    colors = ['#66B032', '#FF6F61']
    explode = (0, 0.1)  # Slightly explode the "Success" slice as well (you can tweak as needed)

    # Plotting the pie chart
    plt.figure(figsize=(10, 8))  # Set figure size
    plt.pie(x, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', wedgeprops={'linewidth': 2, 'edgecolor': 'white'}, shadow=True, startangle=200, textprops={'fontsize': 18, 'fontfamily': 'Palatino', 'color': 'black'})  # Optional: add boldness to text

    # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.axis('equal')

    # Title
    plt.title(f'{mon_name} Overall Quiz Evaluation', fontdict={'fontweight': 'bold', 'fontsize': 25, 'fontfamily': 'Palatino'})

    # Save the chart with transparent background
    plt.savefig(f"../frontend/src/assets/{email}/{email}_{mon_name}_overallEvaluation.png", transparent=True)

    # *********************************************************************************************************************************************** #

    if success != [] :
        labels = dates  # X-axis labels (dates)

        num_bars = len(labels)

        plt.figure(figsize=(12, 8))  # Increase figure size for better visualization

        # **Create evenly spaced positions for bars**
        x_pos = np.arange(num_bars)

        # **Adjust Bar Width Dynamically**
        bar_width = max(0.3, min(0.6, 6 / num_bars))  # Ensures bars have good spacing

        # **Color Gradient for Bars**
        colors = ["#7eb0d5", "#fd7f6f", "#b2e061", "#bd7ebe", "#ffb55a", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7"]

        # **Plot bars with corrected positioning**
        bars = plt.bar(x_pos, success, width=bar_width, color=colors, edgecolor='white', linewidth=2)

        # **Title and Labels**
        plt.title(f'{mon_name} Quizzes Evaluation', fontsize=28, fontweight='bold', fontfamily='Palatino', pad=50)
        plt.xlabel('\nDate', fontsize=25, labelpad=10, fontfamily='Palatino')
        plt.ylabel('Success Rate\n', fontsize=25, labelpad=10, fontfamily='Palatino')

        # **Apply Correct X-Ticks**
        plt.xticks(x_pos, labels, rotation=45, fontsize=15, fontweight='bold')  # Now, labels match x_pos
        plt.yticks(fontsize=15, fontweight='bold')

        # **Style Improvements**
        plt.gca().spines[['top', 'right']].set_visible(False)  # Hide top & right border
        plt.grid(axis='y', linestyle='--', alpha=0.7)  # Light grid for readability

        # **Add percentage labels above bars**
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{height:.1f}%', ha='center', fontsize=15, fontfamily='Palatino', color='Maroon')

        # For Making Bar Plot Normal Even All The Bars Have Height 0
        if all(v == 0 for v in success):
            plt.ylim(0, 100)  # Fixed scale when all zero
        else:
            plt.ylim(0, max(success) + 10)  # Dynamic scaling with margin

        # **Save & Show the Chart**
        plt.savefig(f"../frontend/src/assets/{email}/{email}_{mon_name}_quizEvaluation.png", transparent=True, bbox_inches='tight', dpi=300)



def make_pdf_report(email, subjects, chapters, quiz_names, tot_que, userMarks, MaxMarks, success, failure, dates, month_names) :

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, Mobile, Qualification, DOB, Gender, Country FROM UserDetails WHERE Mail=?"""
    res = cur.execute(query, (email,))
    userData = res.fetchall()

    Name, UserName, Mobile, Qualification, DOB, Gender, Country = '', '', '', '', '', '', ''
    if userData :
        userData = userData[0]
        Name, UserName, Mobile, Qualification, DOB, Gender, Country = userData[0], userData[1], userData[2], userData[3], userData[4], userData[5], userData[6]

    # Set Page-Width And Height
    page_width, page_height = A4

    # Set Margins
    margin = 0.5 * inch           # For setting margin in all sides
    right_margin = 1 * inch       # For setting margin in right side

    styles = getSampleStyleSheet()
    style = styles["Normal"]

    # Create PDF And Its Object
    filename = f"{email}/{email}_Report.pdf"

    t = time.ctime()

    # Encryption
    password_ = f"{quiz_names}#{t}hd95%{quiz_names}GH{quiz_names}MS{subjects}TS$*&%{Name}VF{quiz_names}{quiz_names}{quiz_names}{quiz_names}S<{subjects}ALO{t}DHDYCT{UserName}dbdjI{quiz_names}GG{subjects}snYnjdi*^353{quiz_names}bd8s{t}Us7DG{subjects}423#H*&^%{t}$Gsg82{subjects}m{quiz_names}ck0a{Mobile}dbdjIGGsnYnjd{subjects}i*^353bd{t}8sU{quiz_names}s7DG423#H{subjects}*&^%{t}$Gsg82mck0a{Qualification}VFS<AL{t}ODHDYCT{subjects}{DOB}dbdjIGGsnYnjd{t}i*^353{subjects}bd{t}8sUs7D{subjects}G423#H*{t}&^%$Gsg8{t}2m{quiz_names}ck0a{Gender}dbd{subjects}{subjects}jIGGsnY{t}{subjects}njdi*^353bd8sUs7{subjects}{t}DG{quiz_names}423{subjects}#H*&{t}^%$Gsg8{subjects}2mck0a{Country}$#@!&NVVFS<ALO{t}DHDYC{quiz_names}Thdb{Name}VFS<AL{t}ODHDYCT{UserName}VFS{subjects}<ALO{t}DHDYCT{Mobile}dbdjI{subjects}GGsnY{t}njdi*^3{subjects}53bd8{t}sUs7D{subjects}G423#{t}H*&^%{quiz_names}$Gsg82m{subjects}ck0a{Qualification}VFS<A{subjects}LO{t}DHDYCT{DOB}{Gender}VFS<{subjects}ALOD{t}HDYCT{Country}fgs88{quiz_names}2302{t}475hGV{subjects}GS&934{Name}dbdj{quiz_names}IGGsnY{t}njdi*^353b{subjects}d8sUs7DG423#{t}H*&^%$Gsg82{subjects}m{quiz_names}ck0a{UserName}{t}{Mobile}dbdjIG{subjects}GsnYn{t}jdi*^353bd{quiz_names}8sUs7DG423#{t}H*&^{quiz_names}%$Gsg82{subjects}m{t}ck0a{Qualification}dbdj{quiz_names}IG{subjects}GsnYnj{t}di*^353b{quiz_names}d8sU{subjects}s7DG423{t}#H*&^%$Gsg{t}82{quiz_names}mck0a{DOB}VFS<ALO{t}DHDYCT{Gender}{Country}54ncdd8654{t}2y45n5{subjects}8&%#$@NDHD{Name}dbdjIGG{quiz_names}snYnjdi*^{t}353bd8sUs7DG42{subjects}3#H*&^%$Gs{t}g82mc{quiz_names}{quiz_names}k0a{UserName}VFS<ALODHDYCT{Mobile}VFS<ALO{subjects}D{t}HDYCT{Qualification}{DOB}{Gender}{Country}{quiz_names}UE_dhb{quiz_names}hbcjdi-{t}fbhfh8462^^*#n{quiz_names}jjdHH{Name}dbd{subjects}jIGG{t}snYnjdi*^3{subjects}53b{subjects}d8s{subjects}Us7DG4{quiz_names}23#H*&{t}^%$Gsg82m{subjects}ck0a{UserName}{Mobile}VFS<{subjects}ALODHDY{t}CTVF{quiz_names}{quiz_names}{subjects}{quiz_names}S<AL{subjects}ODHDY{t}CT{Qualification}VFS<{subjects}ALO{t}DHDYCT{DOB}dbdjIGGsnYnjd{quiz_names}i*^353bd8s{t}Us7DG{subjects}423#H*&^{t}%$Gsg{subjects}82mck0a{Gender}{subjects}{Country}DVs{quiz_names}mjdg{t}f{subjects}"
    encrypt = pdfencrypt.StandardEncryption(
        userPassword="",            # No Password required to open the file by user
        ownerPassword=password_,   # Password for changing permissions
        canPrint=1,                 # Allow printing
        canModify=0,                # Disallow editing
        canCopy=0,                  # Disallow copy-paste
        canAnnotate=0               # Disallow annotations
    )

    pdf = SimpleDocTemplate(f"./Documents/{filename}", encrypt=encrypt, pagesize=A4, topMargin=0.5*inch, bottomMargin=0.5*inch, leftMargin=0.5*inch, rightMargin=0.5*inch)

    # Calculate the starting x-coordinate for right-aligned text
    x = page_width - right_margin

    # Define a Paragraph
    para = []

    # Define Styles
    textStyle1 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=23, leading=20, alignment=TA_CENTER, textColor=colors.HexColor('#C11B17'))
    textStyle2 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=20, leading=20, alignment=TA_CENTER, textColor=colors.HexColor('#C11B17'))
    textStyle3 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=17, leading=20, alignment=TA_CENTER, textColor=colors.HexColor('#C11B17'))
    textStyle4 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=14, leading=20, alignment=TA_LEFT)
    textStyle5 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=18, leading=20, alignment=TA_LEFT, textColor=colors.HexColor('#C11B17'))
    textStyle6 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=10, leading=15, alignment=TA_LEFT, textColor=colors.black)
    textStyle7 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=8, leading=20, alignment=TA_CENTER, textColor=colors.HexColor('#C11B17'))
    textStyle8 = ParagraphStyle(name='CustomStyle', fontName='Times-Roman', fontSize=11, leading=20, alignment=TA_JUSTIFY)

    # Adding Title
    title = f"<b><u>Sober Shah Quiz Web Application</u></b>"
    para.append(Paragraph(title, textStyle1))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    subtitle_1 = f"<b><u>Participant Evaluation Report</u></b>"
    para.append(Paragraph(subtitle_1, textStyle2))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    subtitle_2 = f"<b><u>Session Year</u> : <u>{datetime.now().strftime('%Y')}</u></b>"
    para.append(Paragraph(subtitle_2, textStyle3))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    subtitle_3 = f"<b><u>Month</u> : <u>{datetime.now().strftime('%B')}</u></b>"
    para.append(Paragraph(subtitle_3, textStyle3))
    para.append(Spacer(width=1*inch, height=1*inch))

    text0 = f"<font name='Times-Roman' size=16><b><u>Participant Details</u></b></font>"
    para.append(Paragraph(text0, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.5*inch))

    tableData = [
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Name </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {Name}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Username </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {UserName}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Email </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {email}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Mobile Number </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {Mobile}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Highest Qualification </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {Qualification}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Date of Birth </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {DOB}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Gender </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {Gender}</font>", styles['Normal'])],
        [Paragraph("<font name='Times-Roman' size=11 color='White'> &nbsp; <b> Country </b> </font>"), Paragraph(f"<font name='Times-Roman' size=14 color='Black'> &nbsp; &nbsp; {Country}</font>", styles['Normal'])]
    ]

    t = Table(tableData, colWidths=[2.5*inch, 4.5*inch], rowHeights=[0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch], style=[
        ('BACKGROUND', (0,0), (0,-1), '#4CAF50'),
        ('TEXTCOLOR',(0,0),(0,-1), colors.white),
        ('BOX',(0,0),(1,10), 1, colors.black),
        ('ALIGN',(0,1),(1,10), 'LEFT'),
        ('BOX',(0,0),(0,9), 0.5, colors.black),
        ('BOX',(1,0),(1,9), 0.5, colors.black),
        ('BOX',(0,0),(1,0), 0.5, colors.black),
        ('BOX',(0,1),(1,1), 0.5, colors.black),
        ('BOX',(0,2),(1,2), 0.5, colors.black),
        ('BOX',(0,3),(1,3), 0.5, colors.black),
        ('BOX',(0,4),(1,4), 0.5, colors.black),
        ('BOX',(0,5),(1,5), 0.5, colors.black),
        ('BOX',(0,6),(1,6), 0.5, colors.black),
        ('BOX',(0,7),(1,7), 0.5, colors.black),
        ('BOTTOMPADDING', (0,0), (-1,-1), 7),
    ])

    para.append(t)
    para.append(Spacer(width=0, height=1*inch))

    text1 = f"<font name='Times-Roman' size=15><u>Important Points Regarding Report</u></font>"
    para.append(Paragraph(text1, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.5*inch))

    text2 = f"<font name='Courier' size=11>➣ This report is of the session year 2025.</font>"
    para.append(Paragraph(text2, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    text3 = f"<font name='Courier' size=11>➣ The report is generated on {datetime.now().strftime('%d-%B-%Y')} at {datetime.now().strftime('%H:%M:%S' ' %p')}.</font>"
    para.append(Paragraph(text3, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    text5 = f"<font name='Courier' size=11>➣ In case of any discrepancy in report data, please don't hesitate and contact us.</font>"
    para.append(Paragraph(text5, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    text6 = f"<font name='Courier' size=11>➣ For any further query, please contact us at :</font>"
    para.append(Paragraph(text6, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    text7 = f"<font name='Courier' size=11> &nbsp; &nbsp; &nbsp; <b>• Email :</b></font> <font color='Blue'>23f2002668@ds.study.iitm.ac.in </font>"
    para.append(Paragraph(text7, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    text8 = f"<font name='Courier' size=11> &nbsp; &nbsp; &nbsp; <b>• Wattsapp No. :</b></font> <font color='Blue'> +91-XXX XXX XXXX </font>"
    para.append(Paragraph(text8, styles['Normal']))
    para.append(Spacer(width=1*inch, height=0.2*inch))

    count = 0

    for mon in month_names :
        if success[mon] != [] and failure[mon] != [] :
            # Add New Page
            para.append(PageBreak())
            count += 1
            text10 = f"""<strong>{count}. <u>{mon} Monthly Evaluation</u> </strong>"""
            para.append(Paragraph(text10, textStyle5))
            para.append(Spacer(width=0, height=0.5*inch))

            text12 = f"""<font name='Times-Roman' size=15><u>Quizzes Evaluation</u></font>"""
            para.append(Paragraph(text12, textStyle4))
            para.append(Spacer(width=0, height=0.25*inch))

            tableData_3 = [[Paragraph('<b>Date</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Subject</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Chapter</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Quiz Name</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Total<br/>Questions</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Obt.<br/>Marks</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Max.<br/>Marks</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white)), Paragraph('<b>Success<br/>Rate</b>', ParagraphStyle(name='centered', alignment=TA_CENTER, textColor=colors.white))]]
            styles_3 = [
                ('BACKGROUND', (0,0), (-1,0), '#4CAF50'),
                ('ALIGN',(0,1),(-1,-1), 'LEFT'),
                ('WORDWRAP', (0, 0), (-1, -1), 'CJK'),  # Allows wrapping for long text
                ('BOX',(0,0),(-1,-1), 1, colors.black),
                ('BOX',(0,0),(1,-1), 0.5, colors.black),
                ('BOX',(1,0),(2,-1), 0.5, colors.black),
                ('BOX',(2,0),(3,-1), 0.5, colors.black),
                ('BOX',(3,0),(4,-1), 0.5, colors.black),
                ('BOX',(4,0),(5,-1), 0.5, colors.black),
                ('BOX',(5,0),(6,-1), 0.5, colors.black),
                ('BOX',(6,0),(7,-1), 0.5, colors.black),
                ('BOX',(7,0),(8,-1), 0.5, colors.black),
                ('BOX',(0,0),(-1,0), 0.5, colors.black),
            ]

            c = 1
            for i in range(len(success[mon])) :
                tableData_3.append([Paragraph(dates[mon][i], ParagraphStyle(name='color', textColor=colors.black)), Paragraph(subjects[mon][i], textStyle6), Paragraph(chapters[mon][i], textStyle6), Paragraph(quiz_names[mon][i], textStyle6), Paragraph(str(tot_que[mon][i]), textStyle6), Paragraph(str(userMarks[mon][i]), textStyle6), Paragraph(str(MaxMarks[mon][i]), textStyle6), Paragraph(str(success[mon][i]) + "%", textStyle6)])
                styles_3.append(('BOX',(0,0),(-1,c), 0.5, colors.black))

                if c%2 == 0 :
                    styles_3.append(('BACKGROUND', (0,c), (-1,c), colors.lightgrey))
                c += 1

            t_3 = Table(tableData_3, colWidths=[1*inch, 2*inch, 1.1*inch, 1*inch, 0.85*inch, 0.65*inch, 0.6*inch, 0.75*inch], style=styles_3)
            para.append(t_3)
            para.append(Spacer(width=0, height=0.5*inch))

            img = Image(f"../frontend/src/assets/{email}/{email}_{mon}_quizEvaluation.png", width=6*inch, height=4*inch)
            para.append(img)
            para.append(Spacer(width=0, height=0.25*inch))


            text11 = f"""<font name='Times-Roman' size=15><u>Overall Evaluation</u></font>"""
            para.append(Paragraph(text11, textStyle4))

            tableData_2 = [["Total Quizzes", str(len(success[mon]))],
                           ["Total Questions", str(sum(tot_que[mon]))],
                           ["Obtained Marks", str(round(sum(userMarks[mon]), 4))],
                           ["Max. Marks", str(round(sum(MaxMarks[mon]), 4))],
                           ["Overall Success Rate", str(round(statistics.mean(success[mon]), 4)) + "%"],
                           ["Overall Failure Rate", str(round(statistics.mean(failure[mon]), 4)) + "%"]]

            t_2 = Table(tableData_2, colWidths=[2*inch, 1*inch], rowHeights=[0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch, 0.35*inch], style=[
                ('BACKGROUND', (0,0), (1,0), colors.lightgrey),
                ('BACKGROUND', (0,2), (1,2), colors.lightgrey),
                ('BACKGROUND', (0,4), (1,4), colors.lightgrey),
                ('BACKGROUND', (0,0), (0,-1), '#4CAF50'),
                ('TEXTCOLOR',(0,0),(0,-1), colors.white),
                ('TEXTCOLOR',(1,0),(1,6), colors.black),
                ('FONTNAME',(0,0),(0,-1), 'Times-Bold'),
                ('FONTNAME',(1,0),(1,-1), 'Times-Roman'),
                ('ALIGN',(0,0),(-1,-1), 'LEFT'),
                ('BOX',(0,0),(-1,-1), 1, colors.black),
                ('BOX',(0,0),(0,-1), 1, colors.black),
                ('BOX',(1,0),(1,6), 0.5, colors.black),
                ('BOX',(0,0),(1,0), 0.5, colors.black),
                ('BOX',(0,1),(1,1), 0.5, colors.black),
                ('BOX',(0,2),(1,2), 0.5, colors.black),
                ('BOX',(0,3),(1,3), 0.5, colors.black),
                ('BOX',(0,4),(1,4), 0.5, colors.black),
                ('BOX',(0,5),(1,5), 0.5, colors.black),
                ('BOX',(0,6),(1,6), 0.5, colors.black),
                ('BOX',(0,7),(1,7), 0.5, colors.black),

            ])

            img = Image(f"../frontend/src/assets/{email}/{email}_{mon}_overallEvaluation.png", width=5*inch, height=4*inch)

            combined_table = Table([[t_2, img]], colWidths=[3.5*inch, 4*inch],
                                   style=[
                                       ('VALIGN', (0,0), (-1,-1), 'TOP'),
                                       ('ALIGN', (0,0), (0,0), 'LEFT'),
                                       ('ALIGN', (1,0), (1,0), 'CENTER'),
                                       ('TOPPADDING', (0,0), (0,0), 40),
                                       ('LEFTPADDING', (1,0), (1,0), 10),
                                       ('RIGHTPADDING', (1,0), (1,0), 10),
                                       ('BOTTOMPADDING', (1,0), (1,0), 25),
                                   ])

            para.append(combined_table)
            para.append(Spacer(width=0, height=1*inch))


    text11 = """<font size=12>******************************************** Finished *********************************************</font>"""
    para.append(Spacer(width=1*inch, height=0.75*inch))
    para.append(Paragraph(text11, styles['Normal']))


    pdf.build(para)
    print("Report Created !")



def base64_img(img) :
    with open(img, "rb") as img_file:
        encoded_string = base64.b64encode(img_file.read()).decode('utf-8')

    return encoded_string



def send_html_report(email) :
    html_data(email)

def html_data(email) :
    print("Fetching pdf data . . . . . ")

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Mail, Time FROM QuizData WHERE Mail=?"""
    res = cur.execute(query, (email,))
    QuizData = res.fetchall()
    content, totalQuiz = [], 0
    for i in QuizData:
        totalQuiz += 1
        content.append(i)

    QuizSubject, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], []
    January, February, March, April, May, June, July, August, September, October, November, December = [], [], [], [], [], [], [], [], [], [], [], []
    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    months = [January, February, March, April, May, June, July, August, September, October, November, December]
    obtainedMarks, maxMarks = {}, {}

    data1 = {"Name": "",
             "UserName": "",
             "QuizName": "",
             "QuizSubject": "",
             "QuizTopic": "",
             "TotalQuiz": 0,
             "TotalQuestions": 0,
             "userMarks": 0,
             "MaxMarks": 0,
             "Mail": "",
             "Time": ""
             }

    for i in content :
        date = datetime.now().strftime('%d/%m/%Y')
        year = date.split('/')[2].split(" ")[0]

        if i[9].split('/')[2].split(" ")[0] == year :
            if i[9].split('/')[1] == '01' :
                January.append(i)
            elif i[9].split('/')[1] == '02' :
                February.append(i)
            elif i[9].split('/')[1] == '03' :
                March.append(i)
            elif i[9].split('/')[1] == '04' :
                April.append(i)
            elif i[9].split('/')[1] == '05' :
                May.append(i)
            elif i[9].split('/')[1] == '06' :
                June.append(i)
            elif i[9].split('/')[1] == '07' :
                July.append(i)
            elif i[9].split('/')[1] == '08' :
                August.append(i)
            elif i[9].split('/')[1] == '09' :
                September.append(i)
            elif i[9].split('/')[1] == '10' :
                October.append(i)
            elif i[9].split('/')[1] == '11' :
                November.append(i)
            else :
                December.append(i)

    subjects, chapters, quiz_names, total_que, userMarks, MaxMarks, success, failure, dates = {}, {}, {}, {}, {}, {}, {}, {}, {}

    subprocess.run(f"mkdir ../frontend/src/assets/{email}", shell=True)

    for mon in range(12) :
        (sb, ch, qn, tq, um, mm, s, f, t) = mon_data(months[mon])
        subjects[month_names[mon]], chapters[month_names[mon]], quiz_names[month_names[mon]], total_que[month_names[mon]], userMarks[month_names[mon]], MaxMarks[month_names[mon]], success[month_names[mon]], failure[month_names[mon]], dates[month_names[mon]] = sb, ch, qn, tq, um, mm, s, f, t
        EvaluationChartForReports(email, userMarks[month_names[mon]], MaxMarks[month_names[mon]], success[month_names[mon]], failure[month_names[mon]], dates[month_names[mon]], month_names[mon])

    make_html_report(email, subjects, chapters, quiz_names, total_que, userMarks, MaxMarks, success, failure, dates, month_names)


def mon_data(data) :
    QuizSubjects, Chapters, QuizNames, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], [], [], []
    obtMarks, totMarks = 0, 0
    count = 0

    data1 = {"Name": "",
             "UserName": "",
             "QuizName": "",
             "QuizSubject": "",
             "QuizTopic": "",
             "TotalQuiz": 0,
             "TotalQuestions": 0,
             "userMarks": 0,
             "MaxMarks": 0,
             "Mail": "",
             "Time": ""
             }

    tot, ch, qn = 0, '', ''

    for i in data:
        count += 1
        data1["Name"] = i[0]  # Name
        data1["UserName"] = i[1]  # UserName
        data1["QuizName"] = i[2]  # QuizName
        data1["QuizSubject"] = i[3]  # QuizSubject
        data1["QuizTopic"] = i[4]  # QuizTopic
        data1["TotalQuiz"] = len(data)  # TotalQuiz
        data1["TotalQuestions"] += i[5]  # TotalQuestions
        data1["userMarks"] += i[6]  # userMarks
        obtMarks = i[6]
        data1["MaxMarks"] += i[7]  # MaxMarks
        totMarks = i[7]
        data1["Mail"] = i[8]
        data1["Time"] = i[9]
        tot += i[5]
        ch = i[4]
        qn = i[2]
        QuizSubjects.append(i[3])
        Chapters.append(ch)
        QuizNames.append(qn)
        TotalQuestions.append(i[5])
        userMarks.append(obtMarks)
        MaxMarks.append(totMarks)
        Time.append(i[9])

        try:
            success = round((obtMarks * 100 / totMarks ))
        except:
            succeess = 0

        SuccessRate.append(success)


    data2 = {"QuizSubject": QuizSubjects,
             "TotalQuestions": TotalQuestions,
             "userMarks": userMarks,
             "MaxMarks": MaxMarks,
             "SuccessRate": SuccessRate,
             "Time": Time
             }

    time, success, failure = [], [], []

    for i in range(len(SuccessRate)):
        time.append(Time[i])
        success.append(SuccessRate[i])
        failure.append(round((100 - SuccessRate[i]), 2))

    return (QuizSubjects, Chapters, QuizNames, TotalQuestions, userMarks, MaxMarks, success, failure, time)



def make_html_report(email, subjects, chapters, quiz_names, tot_que, userMarks, MaxMarks, success, failure, dates, month_names):

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()
    query = f"""SELECT Name, UserName, Mobile, Qualification, DOB, Gender, Country FROM UserDetails WHERE Mail=?"""
    res = cur.execute(query, (email,))
    userData = res.fetchall()

    Name, UserName, Mobile, Qualification, DOB, Gender, Country = '', '', '', '', '', '', ''
    if userData :
        userData = userData[0]
        Name, UserName, Mobile, Qualification, DOB, Gender, Country = userData[0], userData[1], userData[2], userData[3], userData[4], userData[5], userData[6]


    styles = f"""
        <style>
            table {{
                border: 1.5px solid black;
                border-collapse: collapse;
                width: 50%;
                margin: 20px auto;
                font-family: Palatino;
                box-shadow: 0px 0px 8px rgba(0,0,0,0.2);
            }}
    
            th, td {{
                border: 1px solid #888;
                padding: 10px;
                text-align: left;
            }}
            
            th {{
                background-color: #4CAF50;
                color: white;
                width: 30%;
            }}
    
            .table, .img {{
                flex: 1;
                width: 50%;
            }}
            
        </style>
    """

    data = f"""
        <div id="background" style="width: 95%; margin: 0% 2.5% 0% 2.5%;">
            <div id="headings">
                <br>
                <h1 style="text-align: center; color: Maroon; font-size: 2.15rem;"><u>Sober Shah Quiz Web Application</u></h1>
                <h2 style="text-align: center; color: Maroon; font-size: 1.75rem;"><u>Participant Evaluation Report</u></h2>
                <h2 style="text-align: center; color: Maroon; font-size: 1.5rem;"><u>Session Year : {datetime.now().strftime('%Y')}</u></h2>
            </div>
    
            <br><br><br>
    
            <h2><u>Participant Details</u></h2><br>
    
            <table>
                <tr>
                    <th>Name</th>
                    <td>{Name}</td>
                </tr>
                <tr>
                    <th>Username</th>
                    <td>{UserName}</td>
                </tr>
                <tr>
                    <th>Email</th>
                    <td>{email}</td>
                </tr>
                <tr>
                    <th>Mobile Number</th>
                    <td>{Mobile}</td>
                </tr>
                <tr>
                    <th>Highest Qualification</th>
                    <td>{Qualification}</td>
                </tr>
                <tr>
                    <th>Date of Birth</th>
                    <td>{DOB}</td>
                </tr>
                <tr>
                    <th>Gender</th>
                    <td>{Gender}</td>
                </tr>
                <tr>
                    <th>Country</th>
                    <td>{Country}</td>
                </tr>
            </table>
    
            <h3 style="margin-top: 10vh;"><u>Important Points Regarding Report</u></h3>
            <p>➣ This report is of the session year 2025.</p>
            <p>➣ The report is generated on {datetime.now().strftime('%d-%B-%Y')} at {datetime.now().strftime('%H:%M:%S' ' %p')}.</p>
            <p>➣ In case of any discrepancy in report data, please don't hesitate and contact us.</p>
            <p>➣ For any further query, please contact us at :</p>
            <p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>• Email :</b> <a href="mailto:23f2002668@ds.study.iitm.ac.in">23f2002668@ds.study.iitm.ac.in</a></p>
            <p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>• Wattsapp No. :</b> <a href="tel:9000900092">+91-0000000009</a></p>
    
            <br><br><br><br>
    """

    count = 0

    for mon in month_names :
        if success[mon] != [] and failure[mon] != [] :
            count += 1

            data_1 = ""

            data_2 = f"""
            <h2>{count}. <u>{mon} Monthly Evaluation</u></h2><br>
    
            <div id="quizzesEvaluation">
                <h3 style="font-size: 1.5rem;">◈ <u>Quizzes Evaluation</u></h3><br>
    
                <table id="quizzes" style="width: 100%;">
                    <tr>
                        <th style="width: 7%; text-align: center;">Date</th>
                        <th style="width: 25%; text-align: center;">Subject</th>
                        <th style="width: 20%; text-align: center;">Chapter</th>
                        <th style="width: 18%; text-align: center;">Quiz Name</th>
                        <th style="width: 5%; text-align: center;">Total Questions</th>
                        <th style="width: 5%; text-align: center;">Obt. Marks</th>
                        <th style="width: 5%; text-align: center;">Max. Marks</th>
                        <th style="width: 5%; text-align: center;">Success Rate</th>
                    </tr>
            """

            c = 1
            for i in range(len(success[mon])) :
                data_3 = f"""
                    <tr>
                        <td>{dates[mon][i]}</td>
                        <td>{subjects[mon][i]}</td>
                        <td>{chapters[mon][i]}</td>
                        <td>{quiz_names[mon][i]}</td>
                        <td>{tot_que[mon][i]}</td>
                        <td>{userMarks[mon][i]}</td>
                        <td>{MaxMarks[mon][i]}</td>
                        <td>{success[mon][i]}%</td>
                    </tr>
                """

                data_2 += data_3

            data_4 = """
                </table>
                <br><br><br>
            """

            img_1 = f"../frontend/src/assets/{email}/{email}_{mon}_quizEvaluation.png"
            img_1 = base64_img(img_1)

            img_2 = f"../frontend/src/assets/{email}/{email}_{mon}_overallEvaluation.png"
            img_2 = base64_img(img_2)

            data_5 = f"""
                <img src='data:image/png;base64,{img_1}' width="75%" height="700vh" style="margin-left: 10.5%;">
            
            </div>
            <br><br><br><br><br><br><br><br>
            
            <div id="overallEvaluation">
                <h3 style="font-size: 1.5rem;">◈ <u>Overall Evaluation</u></h3>
                <div id="flex-box" style="display: flex; justify-content: space-between; align-items: flex-start;">
                    <div id="table" style="width: 50%; float: left; margin-left: 0;">
                        <br><br>
                        <table style="width: 85%; float: left; margin-left: 7.5%;">
                        <tr>
                                <th>Total Quizzes</th>
                                <td>{len(success[mon])}</td>
                            </tr>
                            <tr>
                                <th>Total Questions</th>
                                <td>{sum(tot_que[mon])}</td>
                            </tr>
                            <tr>
                                <th>Obtained Marks</th>
                                <td>{round(sum(userMarks[mon]), 4)}</td>
                            </tr>
                            <tr>
                                <th>Max. Marks</th>
                                <td>{round(sum(MaxMarks[mon]), 4)}</td>
                            </tr>
                            <tr>
                                <th>Overall Success Rate</th>
                                <td>{round(statistics.mean(success[mon]))}</td>
                            </tr>
                            <tr>
                                <th>Overall Failure Rate</th>
                                <td>{round(statistics.mean(failure[mon]))}</td>
                            </tr>
                            
                        </table>
                    </div>
    
                    <div id="img" style="width: 50%; text-align: center;">
                        <img src='data:image/png;base64,{img_2}' width="80%">
                    </div>
                </div>
    
                <br><br><br><br><br><br><br><br>
            </div>
            
            """

            data_4 += data_5

            data_2 += data_4

            data_1 += data_2

            data += data_1


    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Participant Evaluation Report</title>
        {styles}
    </head>
    <body>
    {data}
            <hr>
            <div id="Footer">
              <p style = "color: black;"> Shahzada Moon | Copyright, {datetime.now().strftime('%Y')} </p>
            </div>
        </div>
    </body>
    </html>
    """

    filename = f"Documents/{email}/{email}_Report.html"
    with open (filename, 'w') as f :
        f.write(html)



def send_csv_data(email) :
    filename = f"Documents/{email}/{email}_Quiz_Data.csv"

    with open (filename, 'w', newline='') as f :
        writer = csv.writer(f)
        writer.writerow(["Date", "Subject", "Chapter", "Quiz Name", "Duration (Seconds)", "Total Questions", "Maximum Marks", "Obtained Marks"])

    csv_data(email)


def csv_data(email) :
    print("Fetching CSV data . . . . . ")

    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = f"""SELECT Name, UserName, QuizName, QuizSubject, QuizTopic, TotalQuestions, UserMarks, MaxMarks, Time, Duration FROM QuizData WHERE Mail=?"""
    res = cur.execute(query, (email,))
    QuizData = res.fetchall()

    content, totalQuiz = [], 0
    for i in QuizData:
        totalQuiz += 1
        content.append(i)

    QuizSubject, TotalQuestions, userMarks, MaxMarks, SuccessRate, Time = [], [], [], [], [], []
    January, February, March, April, May, June, July, August, September, October, November, December = [], [], [], [], [], [], [], [], [], [], [], []
    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    months = [January, February, March, April, May, June, July, August, September, October, November, December]
    obtainedMarks, maxMarks = {}, {}


    for i in content :
        date = datetime.now().strftime('%d/%m/%Y')
        year = date.split('/')[2].split(" ")[0]

        if i[8].split('/')[2].split(" ")[0] == year :
            if i[8].split('/')[1] == '01' :
                January.append(i)
            elif i[8].split('/')[1] == '02' :
                February.append(i)
            elif i[8].split('/')[1] == '03' :
                March.append(i)
            elif i[8].split('/')[1] == '04' :
                April.append(i)
            elif i[8].split('/')[1] == '05' :
                May.append(i)
            elif i[8].split('/')[1] == '06' :
                June.append(i)
            elif i[8].split('/')[1] == '07' :
                July.append(i)
            elif i[8].split('/')[1] == '08' :
                August.append(i)
            elif i[8].split('/')[1] == '09' :
                September.append(i)
            elif i[8].split('/')[1] == '10' :
                October.append(i)
            elif i[8].split('/')[1] == '11' :
                November.append(i)
            else :
                December.append(i)
    print(months)

    csv_file(email, months)


def csv_file(email, months) :
    filename = f"Documents/{email}/{email}_Quiz_Data.csv"

    with open (filename, 'a', newline='') as f :
        writer = csv.writer(f)
        for mon in months :
            if mon != [] :
                for data in mon :
                    writer.writerow([data[8], data[3], data[4], data[2], data[9], data[5], data[7], data[6]])


    df = pd.read_csv(filename)

@app.route("/search/<keyword>", methods=["GET", "POST"])
def search(keyword) :
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = f"""SELECT Name, Subject, Topic, TotalQuestions, TotalTime, Time FROM QuizDetails WHERE Name LIKE ? OR Subject LIKE ? OR Topic LIKE ?"""
    res = cur.execute(query, (keyword, keyword, keyword, ))
    QuizData = res.fetchall()

    d = {
        'Subject': [],
        'Chapter': [],
        'Name': [],
        'TotalQuestions': [],
        'Duration': [],
        'Time': []
    }

    data = []

    if QuizData :
        for i in QuizData :
            d['Subject'].append(i[1])
            d['Chapter'].append(i[2])
            d['Name'].append(i[0])
            d['TotalQuestions'].append(i[3])
            d['Duration'].append(i[4])
            d['Time'].append(i[5])

            data.append(
                    {
                         'Subject': i[1],
                         'Chapter': i[2],
                         'Name': i[0],
                         'TotalQuestions': i[3],
                         'Duration': i[4],
                         'Time': i[5]
                    }
             )

    return jsonify(data), 200

@app.route("/search_user/<keyword>", methods=["GET", "POST"])
def search_user(keyword) :
    con = sqlite3.connect('instance/QuizMaster.sqlite3')
    cur = con.cursor()

    query = f"""SELECT Name, UserName, Mail, Mobile, Qualification, DOB, Gender, Country, Time FROM UserDetails WHERE Type=? AND (Name LIKE ? OR UserName LIKE ? OR Mail LIKE ? OR Mobile LIKE ? OR Qualification LIKE ? OR DOB LIKE ? OR Gender LIKE ? OR Country LIKE ?)"""
    res = cur.execute(query, ('User', keyword, keyword, keyword, keyword, keyword, keyword, keyword, keyword, ))
    UserData = res.fetchall()

    d = {
        'Name': [],
        'UserName': [],
        'Mail': [],
        'Mobile': [],
        'Qualification': [],
        'DOB': [],
        'Gender': [],
        'Country': [],
        'Time': []
    }

    data = []

    if UserData :
        for i in UserData :
            d['Name'].append(i[0])
            d['UserName'].append(i[1])
            d['Mail'].append(i[2])
            d['Mobile'].append(i[3])
            d['Qualification'].append(i[4])
            d['DOB'].append(i[5])
            d['Gender'].append(i[6])
            d['Country'].append(i[7])
            d['Time'].append(i[8][4:])

            data.append(
                {
                    'Name': i[0],
                    'UserName': i[1],
                    'Mail': i[2],
                    'Mobile': i[3],
                    'Qualification': i[4],
                    'DOB': i[5],
                    'Gender': i[6],
                    'Country': i[7],
                    'Time': i[8][4:]
                }
            )

    return jsonify(data), 200




@app.route("/logout/<email>", methods=['GET', 'POST'])
def logout(email):

    print("logout")

    for file in files :
        try :
            subprocess.run(f"rm -f {file}", shell=True)
        except :
            None

    try :
        subprocess.run(f"rm -r ../frontend/src/assets/*/", shell=True)
        subprocess.run(f"rm -r ./Documents", shell=True)
    except :
        None

    session.clear()
    return jsonify(message="Logged out successfully"), 200


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))  # Use environment PORT if provided
    app.debug = True
    app.run(host="0.0.0.0", port=port)
